{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["validate","makeStyles","table","minWidth","values","console","log","errors","latitude","longitude","App","useState","dataarr","setDatarr","onSubmit","a","sleep","ms","Promise","resolve","setTimeout","year","Date","getFullYear","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","navigator","geolocation","getCurrentPosition","position","coords","url","fetch","then","res","json","data","times","catch","err","useEffect","now","start","diff","getTimezoneOffset","actual","Math","floor","slice","length","style","padding","margin","maxWidth","CssBaseline","Typography","variant","align","component","gutterBottom","paragraph","Link","href","initialValues","ExampleLatitude","ExampleLongitude","render","handleSubmit","onChange","reset","submitting","pristine","Paper","Grid","container","alignItems","spacing","item","xs","fullWidth","required","name","TextField","type","label","marginTop","Button","onClick","disabled","color","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","scope","day","fajr","sunrise","dhuhr","asr_h","maghrib","isha","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53709525.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport { Form, Field } from 'react-final-form';\nimport { TextField, Checkbox, Radio, Select } from 'final-form-material-ui';\nimport {\n  Typography,\n  Paper,\n  Link,\n  Grid,\n  Button,\n  CssBaseline,\n  RadioGroup,\n  FormLabel,\n  MenuItem,\n  FormGroup,\n  FormControl,\n  FormControlLabel,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\n\n\nconst onChange = async values =>{\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n  await sleep(300);\n  \n \n}\nconst validate = values => {\n  console.log(\"values \", values);\n\n  const errors = {};\n  if (!values.latitude) {\n    errors.latitude = 'Required';\n  }\n  if (!values.longitude) {\n    errors.longitude = 'Required';\n  }\n\n  return errors;\n};\n\nfunction App() {\n  const [dataarr, setDatarr] = useState([]);\n  const onSubmit = async values => {\n    const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n    await sleep(300);\n    const year = new Date().getFullYear(); \n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone; \n    const method = 0; \n    const both = false; \n    const time = 1; \n    navigator.geolocation.getCurrentPosition(function(position) {\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n      const url = 'https://www.moonsighting.com/time_json.php?year=' + year + '&tz=' + timezone +'&lat=' + position.coords.latitude + '&lon=' + position.coords.longitude + '&method=' + method + '&both=' + both + '&time=' + time\n  \n      fetch(url, {\n       \n      })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"data\", data);\n     //   window.alert(JSON.stringify(values, 0, 2));\n        setDatarr(data.times);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    \n    });\n  \n  };\n  useEffect(() => {\n    console.log(\"dataarr \", dataarr);\n    //loading here as this does it once\n    //second array makes it simulate component did mount\n  }, [dataarr]);\n  useEffect(() => {\n    const year = new Date().getFullYear(); \n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone; \n    const method = 0; \n    const both = false; \n    const time = 1; \n    navigator.geolocation.getCurrentPosition(function(position) {\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n      const url = 'https://www.moonsighting.com/time_json.php?year=' + year + '&tz=' + timezone +'&lat=' + position.coords.latitude + '&lon=' + position.coords.longitude + '&method=' + method + '&both=' + both + '&time=' + time\n  \n      fetch(url, {\n       \n      })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"data\", data);\n       // window.alert(JSON.stringify(values, 0, 2));\n       console.log(\"data.times \", data.times);\n       var now = new Date();\n       var start = new Date(now.getFullYear(), 0, 0);\n       var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\n       var oneDay = 1000 * 60 * 60 * 24;\n       var day = Math.floor(diff / oneDay);\n       var actual = day - 1; \n       console.log('Day of year: ' + actual);\n        setDatarr(data.times.slice(actual,data.times.length));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    \n    });\n  }, []);\n  return (\n    <div style={{ padding: 16, margin: 'auto', maxWidth: 600 }}>\n      <CssBaseline />\n      <Typography variant=\"h2\" align=\"center\" component=\"h1\" gutterBottom>\n      Page Under Construction Use With Caution \n      </Typography>\n  \n      <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\n        Prayer Chart Time Form\n      </Typography>\n  \n      <Typography paragraph>\n        <Link href=\"https://support.google.com/maps/answer/18539?co=GENIE.Platform%3DDesktop&hl=en\">\n         How to get Latitude and longitude from Google\n        </Link>\n        . Enter your desired Latitude and Longitude to get Prayer Times from this {' '}\n        <Link href=\"https://github.com/PrayerTimeResearch/PrayerTimeAPI\">\n          API.\n        </Link>{' '}\n        User Location is not stored anywhere on website please consider enabling. \n      </Typography>\n      <Form\n        onSubmit={onSubmit}\n        initialValues={{ ExampleLatitude: '37.97441011798584' , ExampleLongitude: ' -87.4315543621677' }}\n        validate={validate}\n        render={({ handleSubmit, onChange, reset, submitting, pristine, values }) => (\n          <form onSubmit={handleSubmit}>\n            <Paper style={{ padding: 16 }}>\n              <Grid container alignItems=\"flex-start\" spacing={2}>\n                <Grid item xs={6}>\n                  <Field\n                    fullWidth\n                    required\n                    name=\"latitude\"\n                    component={TextField}\n                    type=\"text\"\n                    label=\"Latitude\"\n                    onChange={onChange}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <Field\n                    fullWidth\n                    required\n                    name=\"longitude\"\n                    component={TextField}\n                    type=\"text\"\n                    label=\"longitude\"\n                    onChange={onChange}\n\n                  />\n                </Grid>\n               \n            \n               {/*disabled = (reset) {submitting || pristine} */}\n              {/*disabled = (submit) {submitting}*/}\n            \n                <Grid item style={{ marginTop: 16 }}>\n                  <Button\n                    type=\"button\"\n                    variant=\"contained\"\n                    onClick={reset}\n                    disabled={true}                   \n                  >\n                    Reset\n                  </Button>\n                </Grid>\n                <Grid item style={{ marginTop: 16 }}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    disabled={true}\n                  >\n                    Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </Paper>\n           {/*     <pre>{JSON.stringify(values, 0, 2)}</pre>*/}\n            <TableContainer component={Paper}>\n           <Table aria-label=\"simple table\">\n             <TableHead>\n               <TableRow>\n                 <TableCell>Day</TableCell>\n                 <TableCell align=\"right\">Fajr</TableCell>\n                 <TableCell align=\"right\">Sunrise</TableCell>\n                 <TableCell align=\"right\">Zhur</TableCell>\n                 <TableCell align=\"right\">Asr</TableCell>\n                 <TableCell align=\"right\">Maghrib</TableCell>\n                 <TableCell align=\"right\">Isha</TableCell>\n               </TableRow>\n             </TableHead>\n             <TableBody>\n               {dataarr.map((row) => (\n                 <TableRow key={row.times.day}>\n                   <TableCell component=\"th\" scope=\"row\">\n                     {row.day}\n                   </TableCell>\n                 \n                   <TableCell align=\"right\">{row.times.fajr}</TableCell>\n                   <TableCell align=\"right\">{row.times.sunrise}</TableCell>\n                   <TableCell align=\"right\">{row.times.dhuhr}</TableCell>\n                   <TableCell align=\"right\">{row.times.asr_h}</TableCell>\n                   <TableCell align=\"right\">{row.times.maghrib}</TableCell>\n                   <TableCell align=\"right\">{row.times.isha}</TableCell>\n\n                 </TableRow>\n               ))}\n             </TableBody>\n           </Table>\n         </TableContainer>\n          </form>\n        \n        )}\n      />\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}